import os
from datetime import datetime

# Lista de campus con descripciones
CAMPUS = {
    "zona core": "√Årea principal de red de alta velocidad",
    "campus uno": "Edificio principal de la organizaci√≥n",
    "campus matriz": "Sede central de operaciones",
    "sector outsourcing": "Zona para servicios externalizados"
}

# Tipos de dispositivos y sus caracter√≠sticas
TIPOS_DISPOSITIVO = {
    1: {"nombre": "Router", "servicios": ["Enrutamiento"]},
    2: {"nombre": "Switch", "servicios": ["Datos", "VLAN", "Trunking"]},
    3: {"nombre": "Switch multicapa", "servicios": ["Datos", "VLAN", "Trunking", "Enrutamiento"]},
    4: {"nombre": "Dispositivo final", "servicios": ["Acceso a red"]}
}

JERARQUIAS = ["N√∫cleo", "Distribuci√≥n", "Acceso", "Cliente"]

class Dispositivo:
    def __init__(self, tipo, nombre, ip, vlan, jerarquia, servicios):
        self.tipo = tipo
        self.nombre = nombre
        self.ip = ip
        self.vlan = vlan
        self.jerarquia = jerarquia
        self.servicios = servicios
        self.fecha_registro = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    def to_dict(self):
        return {
            "Tipo": self.tipo,
            "Nombre": self.nombre,
            "IP": self.ip,
            "VLAN": self.vlan,
            "Jerarqu√≠a": self.jerarquia,
            "Servicios": self.servicios,
            "Fecha Registro": self.fecha_registro
        }

def clear():
    """Limpia la pantalla de la consola"""
    os.system("cls" if os.name == "nt" else "clear")

def mostrar_campus():
    """Muestra los campus disponibles con sus descripciones"""
    print("\nüè´ CAMPUS DISPONIBLES:")
    for i, (nombre, desc) in enumerate(CAMPUS.items(), 1):
        print(f"{i}. {nombre.upper()} - {desc}")

def seleccionar_campus():
    """Permite al usuario seleccionar un campus"""
    mostrar_campus()
    while True:
        try:
            opcion = int(input("\nSeleccione un campus: ")) - 1
            if 0 <= opcion < len(CAMPUS):
                return list(CAMPUS.keys())[opcion]
            print("‚ùå Opci√≥n inv√°lida. Intente nuevamente.")
        except ValueError:
            print("‚ùå Por favor ingrese un n√∫mero v√°lido.")

def listar_dispositivos(campus_seleccionado):
    """Lista todos los dispositivos de un campus con n√∫meros"""
    nombre_archivo = f"{campus_seleccionado}.txt"
    dispositivos = []
    
    if os.path.exists(nombre_archivo):
        with open(nombre_archivo, "r") as f:
            contenido = f.read()
        
        # Separar cada dispositivo por el delimitador "======"
        dispositivos_raw = contenido.split("="*40)
        dispositivos_raw = [d.strip() for d in dispositivos_raw if d.strip()]
        
        for i, disp in enumerate(dispositivos_raw, 1):
            lineas = disp.split('\n')
            nombre = next((l.split(': ')[1] for l in lineas if l.startswith('Nombre: ')), "Desconocido")
            dispositivos.append((i, disp, nombre))
    
    return dispositivos

def ver_dispositivos():
    """Muestra los dispositivos de un campus seleccionado"""
    clear()
    campus_seleccionado = seleccionar_campus()
    dispositivos = listar_dispositivos(campus_seleccionado)
    
    if dispositivos:
        print(f"\nüì° DISPOSITIVOS EN {campus_seleccionado.upper()}:\n")
        for num, disp, nombre in dispositivos:
            print(f"üî¢ {num}. Dispositivo: {nombre}")
            print(disp)
            print()
    else:
        print(f"\n‚ùå No hay dispositivos registrados en {campus_seleccionado}.")
    
    input("\nPresione Enter para continuar...")

def validar_ip(ip):
    """Valida una direcci√≥n IP b√°sica"""
    if ip.lower() == "dhcp":
        return True
    partes = ip.split('.')
    if len(partes) != 4:
        return False
    for parte in partes:
        if not parte.isdigit() or not 0 <= int(parte) <= 255:
            return False
    return True

def seleccionar_servicios(tipo_dispositivo):
    """Permite seleccionar servicios seg√∫n el tipo de dispositivo"""
    if tipo_dispositivo == 4:  # Dispositivo final tiene servicios fijos
        return "Acceso a red"
    
    servicios_disponibles = TIPOS_DISPOSITIVO[tipo_dispositivo]["servicios"]
    servicios_seleccionados = []
    
    print("\nüîß SERVICIOS DISPONIBLES:")
    while True:
        for i, servicio in enumerate(servicios_disponibles, 1):
            print(f"{i}. {servicio}")
        print("0. Terminar selecci√≥n")
        
        try:
            opcion = int(input("Seleccione un servicio (0 para terminar): "))
            if opcion == 0:
                break
            if 1 <= opcion <= len(servicios_disponibles):
                servicio = servicios_disponibles[opcion-1]
                if servicio not in servicios_seleccionados:
                    servicios_seleccionados.append(servicio)
                    print(f"‚úÖ {servicio} a√±adido")
                else:
                    print("‚ö†Ô∏è Este servicio ya fue seleccionado")
            else:
                print("‚ùå Opci√≥n inv√°lida")
        except ValueError:
            print("‚ùå Por favor ingrese un n√∫mero")
    
    return ", ".join(servicios_seleccionados) if servicios_seleccionados else "Ninguno"

def agregar_dispositivo():
    """Agrega un nuevo dispositivo a un campus"""
    clear()
    print("‚ûï A√ëADIR NUEVO DISPOSITIVO\n")
    
    # Selecci√≥n de campus
    campus_seleccionado = seleccionar_campus()
    nombre_archivo = f"{campus_seleccionado}.txt"
    
    # Selecci√≥n de tipo de dispositivo
    print("\nüìå TIPO DE DISPOSITIVO:")
    for num, info in TIPOS_DISPOSITIVO.items():
        print(f"{num}. {info['nombre']}")
    
    while True:
        try:
            tipo = int(input("Seleccione el tipo: "))
            if tipo in TIPOS_DISPOSITIVO:
                break
            print("‚ùå Opci√≥n inv√°lida")
        except ValueError:
            print("‚ùå Por favor ingrese un n√∫mero")
    
    # Datos del dispositivo
    print("\nüìù INGRESE LOS DATOS DEL DISPOSITIVO")
    while True:
        nombre = input("Nombre del dispositivo: ").strip()
        if nombre:
            break
        print("‚ùå El nombre no puede estar vac√≠o")
    
    while True:
        ip = input("Direcci√≥n IP (o 'DHCP' para asignaci√≥n autom√°tica): ").strip()
        if validar_ip(ip):
            break
        print("‚ùå IP inv√°lida. Formato esperado: XXX.XXX.XXX.XXX o 'DHCP'")
    
    # VLAN solo para dispositivos de red (no para dispositivos finales)
    if tipo == 4:  # Dispositivo final
        vlan = "N/A"
    else:
        vlan = input("VLANs configuradas (separadas por coma): ").strip()
    
    # Jerarqu√≠a adaptada para dispositivos finales
    print("\nüèóÔ∏è  JERARQU√çA DEL DISPOSITIVO:")
    jerarquias_disponibles = JERARQUIAS.copy()
    if tipo == 4:  # Dispositivo final solo puede ser Cliente
        jerarquia = "Cliente"
        print("1. Cliente (seleccionado autom√°ticamente para dispositivos finales)")
    else:
        for i, jerarquia in enumerate(jerarquias_disponibles, 1):
            print(f"{i}. {jerarquia}")
        
        while True:
            try:
                jerarquia_num = int(input("Seleccione la jerarqu√≠a: "))
                if 1 <= jerarquia_num <= len(jerarquias_disponibles):
                    jerarquia = jerarquias_disponibles[jerarquia_num-1]
                    break
                print("‚ùå Opci√≥n inv√°lida")
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero")
    
    # Servicios (autom√°tico para dispositivos finales)
    servicios = seleccionar_servicios(tipo)
    
    # Crear y guardar dispositivo
    dispositivo = Dispositivo(
        tipo=TIPOS_DISPOSITIVO[tipo]["nombre"],
        nombre=nombre,
        ip=ip,
        vlan=vlan,
        jerarquia=jerarquia,
        servicios=servicios
    )
    
    with open(nombre_archivo, "a") as f:
        f.write("\n" + "="*40 + "\n")
        for clave, valor in dispositivo.to_dict().items():
            f.write(f"{clave}: {valor}\n")
        f.write("="*40 + "\n")
    
    print(f"\n‚úÖ Dispositivo '{nombre}' registrado exitosamente en {campus_seleccionado}!")
    input("Presione Enter para continuar...")

def borrar_dispositivo():
    """Elimina un dispositivo espec√≠fico de un campus"""
    clear()
    print("üóëÔ∏è  BORRAR DISPOSITIVO\n")
    
    # Selecci√≥n de campus
    campus_seleccionado = seleccionar_campus()
    nombre_archivo = f"{campus_seleccionado}.txt"
    
    if not os.path.exists(nombre_archivo):
        print(f"\n‚ùå No hay dispositivos registrados en {campus_seleccionado}.")
        input("\nPresione Enter para continuar...")
        return
    
    # Mostrar dispositivos con n√∫meros
    dispositivos = listar_dispositivos(campus_seleccionado)
    print(f"\nüì° DISPOSITIVOS EN {campus_seleccionado.upper()}:\n")
    for num, disp, nombre in dispositivos:
        print(f"üî¢ {num}. Dispositivo: {nombre}")
    
    # Seleccionar dispositivo a borrar
    while True:
        try:
            opcion = int(input("\nSeleccione el n√∫mero del dispositivo a borrar (0 para cancelar): "))
            if opcion == 0:
                print("\nOperaci√≥n cancelada.")
                input("Presione Enter para continuar...")
                return
            if 1 <= opcion <= len(dispositivos):
                break
            print("‚ùå N√∫mero de dispositivo inv√°lido")
        except ValueError:
            print("‚ùå Por favor ingrese un n√∫mero v√°lido")
    
    # Confirmar borrado
    dispositivo_seleccionado = dispositivos[opcion-1]
    print(f"\n‚ö†Ô∏è  EST√Å A PUNTO DE BORRAR EL SIGUIENTE DISPOSITIVO:")
    print(dispositivo_seleccionado[1])
    confirmacion = input("\n¬øEst√° seguro que desea borrarlo? (s/n): ").lower()
    
    if confirmacion == 's':
        # Reconstruir el archivo excluyendo el dispositivo seleccionado
        nuevos_dispositivos = [d[1] for i, d in enumerate(dispositivos) if i != opcion-1]
        
        with open(nombre_archivo, "w") as f:
            f.write("\n".join(nuevos_dispositivos))
        
        print("\n‚úÖ Dispositivo borrado exitosamente!")
    else:
        print("\nOperaci√≥n cancelada.")
    
    input("\nPresione Enter para continuar...")

def menu():
    """Muestra el men√∫ principal"""
    while True:
        clear()
        print("üîå SISTEMA DE GESTI√ìN DE DISPOSITIVOS DE RED")
        print("\n¬øQu√© desea hacer?")
        print("1. üëÄ Ver dispositivos de un campus")
        print("2. üè´ Ver informaci√≥n de los campus")
        print("3. ‚ûï A√±adir nuevo dispositivo")
        print("4. üóëÔ∏è  Borrar dispositivo")
        print("5. üö™ Salir")
        
        opcion = input("\nSeleccione una opci√≥n: ").strip()
        
        if opcion == "1":
            ver_dispositivos()
        elif opcion == "2":
            clear()
            mostrar_campus()
            input("\nPresione Enter para continuar...")
        elif opcion == "3":
            agregar_dispositivo()
        elif opcion == "4":
            borrar_dispositivo()
        elif opcion == "5":
            print("\nüëã ¬°Hasta pronto!")
            break
        else:
            print("\n‚ùå Opci√≥n inv√°lida. Intente nuevamente.")
            input("Presione Enter para continuar...")

if __name__ == "__main__":
    menu()